{"version":3,"sources":["views/Form/contact.png","components/H1/index.js","components/H4/index.js","components/Img/index.js","components/Section/index.js","components/CenteredSection/index.js","views/Form/index2.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","H1","styled","h1","H4","h4","props","color","Img","className","src","alt","style","Section","section","CenteredSection","height","SectionWrapper","div","paddingTop","Example","id","width","screenState","useForm","handleSubmit","register","errors","useReducer","state","newState","category","companyName","modalFlag","loading","modalText","zipCode","userInput","setUserInput","handleChange","evt","name","target","newValue","value","useState","progressPercent","setCount","updateProgress","progress","Math","round","percentStatus","buttonText","validateFormInput","formInput","console","log","validateNoError","zipCodeObj","zipcodes","lookup","imageMaxWidth","ContactDesign","maxHeight","maxWidth","percent","strokeWidth","strokeColor","onSubmit","values","type","placeholder","onChange","formNoValidate","ref","required","pattern","message","firstName","autoComplete","lastName","emailAddress","phoneNumber","defaultValue","description","services","companyURL","companyFacebookURL","companyInstagramUsername","companyTwitterUsername","undefined","city","country","zip","length","onClick","e","preventDefault","onFormSubmit","App","updateWindowDimensions","setState","window","innerWidth","innerHeight","this","addEventListener","removeEventListener","determineScreenState","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a80386d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/contact.a92bb7b6.png\";","import styled from 'styled-components';\n\nconst H1 = styled.h1`\n  font-size: 2em;\n  margin-bottom: 0.25em;\n  margin-left: 5vw;\n  margin-right: 5vw;\n`;\n\nexport default H1;\n","// /* eslint-disable jsx-a11y/heading-has-content */\n// import React from 'react';\n\n// function H4(props) {\n//   return <h4 {...props.style, {asdf: 'asd'}}  />;\n// }\n\n// export default H4;\n\nimport styled from 'styled-components';\n\nconst H4 = styled.h4`\n  color: ${props => props.color};\n\n`;\n\nexport default H4;\n","/**\n *\n * Img.js\n *\n * Renders an image, enforcing the usage of the alt=\"\" tag\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Img(props) {\n  return (\n    <img\n      className={props.className}\n      src={props.src}\n      alt={props.alt}\n      style={props.style}\n    />\n  );\n}\n\n// We require the use of src and alt, only enforced by react in dev mode\nImg.propTypes = {\n  src: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  alt: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  style: PropTypes.object,\n};\n\nexport default Img;\n","import styled from 'styled-components';\n\nconst Section = styled.section`\n  margin: 0em auto;\n\n  &:first-child {\n    margin-top: 0;\n  }\n`;\n\nexport default Section;\n","import styled from 'styled-components';\nimport Section from '../Section';\n\nconst CenteredSection = styled(Section)`\n  text-align: center;\n  height: ${props => props.height}px;\n`;\n\nexport default CenteredSection;\n","import React, { useReducer, useState } from 'react';\n\nimport Modal from 'react-responsive-modal';\nimport Loader from 'react-loader-spinner';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { Line } from 'rc-progress';\n\nimport { sendEmail } from './helperFunctions';\nimport { REQUIRED_FIELDS } from './constants';\n\nimport H1 from '../../components/H1';\nimport H4 from '../../components/H4';\nimport Img from '../../components/Img';\nimport ContactDesign from './contact.png';\nimport CenteredSection from '../../components/CenteredSection';\n\nimport zipcodes from 'zipcodes';\n\nimport './styles.css';\n\nimport { useForm } from \"react-hook-form\";\n\nconst SectionWrapper = styled.div`\n  padding: 0;\n  margin: 0;\n  padding-top: ${props => props.paddingTop};\n  text-align: center;\n`;\n\nconst Example = ({ id, width, height, screenState }) => {\n  const { handleSubmit, register, errors } = useForm();\n  const onSubmit = values => {\n    console.log(values);\n  };\n\n  const [userInput, setUserInput] = useReducer(\n    (state, newState) => ({ ...state, ...newState }),\n    {\n      // firstName: '',\n      // lastName: '',\n      // emailAddress: '',\n      category: 'Other',\n      // message: '',\n      companyName: 'Yeux',\n      modalFlag: false,\n      loading: false,\n      modalText: '',\n      zipCode: ''\n    },\n  );\n\n  const handleChange = evt => {\n    const { name } = evt.target;\n    const newValue = evt.target.value;\n    setUserInput({ [name]: newValue });\n  };\n\n  let [progressPercent, setCount] = useState(0);\n  const updateProgress = (progress) => {\n    if (progress === \"forward\") setCount(progressPercent + Math.round(5/15 * 100))\n    else if (progress === \"reverse\" ) setCount(progressPercent - Math.round(5/15 * 100))\n  }\n\n  let [percentStatus, buttonText] = [\"first\", \"Next\"];\n  if (progressPercent === 33) { percentStatus = \"second\"; }\n  else if (progressPercent === 66) { percentStatus = \"third\"; }\n  else if (progressPercent === 100) {\n    progressPercent += 1\n    percentStatus = \"done\";\n    buttonText = \"Done!\"\n    // TODO: make API call\n  }\n\n  const openModal = () => {\n    setUserInput({ modalFlag: true });\n  };\n\n  const closeModal = () => {\n    setUserInput({ modalFlag: false });\n  };\n\n  const validateFormInput = (formInput) => {\n    console.log({formInput})\n    console.log({userInput})\n    console.log({errors})\n    return (\n      formInput in userInput &&\n      userInput[formInput] !== '' &&\n      !(formInput in errors)\n    )\n  }\n\n  const validateNoError = (formInput) => {\n    return (\n      !(formInput in errors)\n    )\n  }\n\n  const zipCodeObj = zipcodes.lookup(userInput.zipCode);\n  console.log(zipCodeObj)\n\n  const onFormSubmit = e => {\n    console.log({userInput})\n    // console.log(document.forms[\"myForm\"][\"emailAddress\"].checkValidity());\n    if (\n      validateNoError('companyFacebookURL') &&\n      validateNoError('companyInstagramURL') &&\n      validateNoError('companyTwitterURL') &&\n      validateFormInput('zipCode') &&\n      zipCodeObj !== undefined &&\n      'city' in zipCodeObj &&\n      'state' in zipCodeObj &&\n      // validateFormInput('companyState') &&\n      // validateFormInput('companyCity') &&\n      percentStatus === \"third\"\n    ) {\n      updateProgress(\"forward\");\n      e.preventDefault();\n      return;\n    }\n\n    if (\n      validateFormInput('description') &&\n      validateFormInput('services') &&\n      validateFormInput('category') &&\n      percentStatus === \"second\"\n    ) {\n      updateProgress(\"forward\");\n      e.preventDefault();\n      return;\n    }\n\n    if (\n      validateFormInput('firstName') &&\n      validateFormInput('lastName') &&\n      validateFormInput('emailAddress') &&\n      validateNoError('phoneNumber') &&\n      validateFormInput('companyName') &&\n      percentStatus === \"first\"\n    ) {\n      updateProgress(\"forward\");\n      e.preventDefault();\n      return;\n    }\n\n    console.log(\"no update made\")\n    return;\n    setUserInput({ loading: true });\n    // sendEmail(userInput).then(({ success }) => {\n    //   setUserInput({ loading: false });\n    //   openModal();\n    //   if (success) {\n    //     setUserInput({ modalText: 'Email successfully sent!' });\n    //   } else {\n    //     setUserInput({\n    //       modalText: 'Email was not sent out...try again later.',\n    //     });\n    //   }\n    // });\n  }\n\n  let [imageMaxWidth, paddingTop] = [0, \"\"];\n  if (screenState === \"wide\") {\n    imageMaxWidth = width * 0.5;\n    paddingTop = \"1vh\";\n  } else if (screenState === \"full\") {\n    imageMaxWidth = width * 0.35;\n    paddingTop = \"1vh\";\n  } else if (screenState === \"pacman\") {\n    imageMaxWidth = width * 0.5;\n    paddingTop = \"1vh\";\n  } else if (screenState === \"half\") {\n    imageMaxWidth = width * 0.6;\n    paddingTop = \"7.5vh\";\n  } else if (screenState === \"mobile\") {\n    imageMaxWidth = width * 0.8;\n    paddingTop = \"3vh\";\n  }\n\n  console.log('errors.zipCode =', errors.zipCode)\n\n  return (\n    <SectionWrapper id={id} paddingTop={paddingTop}>\n      <CenteredSection height={height}>\n        <H1>United Dreamers</H1>\n        <H4>Supporting each other as DACA recipients</H4>\n        <Img\n          className=\"no-margin\"\n          src={ContactDesign}\n          alt=\"Yeux_contact_image\"\n          style={{\n            maxHeight: height,\n            maxWidth: imageMaxWidth,\n            width: 'auto',\n            height: 'auto',\n          }}\n        />\n        <Line percent={progressPercent} strokeWidth=\"1\" strokeColor=\"#88D5E9\" className=\"progress-bar\" />\n        <form onSubmit={handleSubmit(onSubmit)}>\n          {percentStatus === \"first\" ? \n            (\n            <ul className=\"form-style-1\">\n              <li>\n                <input\n                  name=\"firstName\"\n                  type=\"hidden\"\n                  value=\"something\"\n                  className=\"field-divided\"\n                  placeholder=\"First Name\"\n                  onChange={handleChange}\n                  formNoValidate\n                  ref={register({\n                    required: 'Required',\n                    pattern: {\n                      value: /^(?=.{1,50}$)[a-z]+(?:['_.\\s][a-z]+)*$/i,\n                      message: \"Use a real first name\"\n                    }\n                  })}\n                />\n                <br/><b>{errors.firstName && errors.firstName.message}</b>\n\n              </li>\n              <li>\n                <input\n                  name=\"lastName\"\n                  className=\"field-divided\"\n                  placeholder=\"Last Name\"\n                  onChange={handleChange}\n                  formNoValidate\n                  autoComplete={\"new-password\"}\n                  ref={register({\n                    required: 'Required',\n                    pattern: {\n                      value: /^(?=.{1,50}$)[a-z]+(?:['_.\\s][a-z]+)*$/i,\n                      message: \"Use a real last name\"\n                    }\n                  })}\n                />\n                <br/><b>{errors.lastName && errors.lastName.message}</b>\n\n              </li>\n              <li>\n                <input\n                  name=\"emailAddress\"\n                  className=\"field-divided\"\n                  placeholder=\"Email Address\"\n                  onChange={handleChange}\n                  formNoValidate\n                  autoComplete={\"new-password\"}\n                  ref={register({\n                    required: 'Required',\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                      message: \"Invalid email address\"\n                    }\n                  })}\n                />\n                <br/><b>{errors.emailAddress && errors.emailAddress.message}</b>\n\n              </li>\n              <li>\n                <input\n                  name=\"phoneNumber\"\n                  className=\"field-divided\"\n                  placeholder=\"Phone Number\"\n                  onChange={handleChange}\n                  formNoValidate\n                  autoComplete={\"new-password\"}\n                  ref={register({\n                    pattern: {\n                      value: /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/im,\n                      message: \"Invalid phone number\"\n                    }\n                  })}\n                />\n                <br/><b>{errors.phoneNumber && errors.phoneNumber.message}</b>\n\n              </li>\n              <li>\n                <input\n                  name=\"companyName\"\n                  className=\"field-divided\"\n                  placeholder=\"Company Name\"\n                  onChange={handleChange}\n                  formNoValidate\n                  autoComplete={\"new-password\"}\n                  ref={register({\n                    required: 'Required',\n                    pattern: {\n                      value: /^[.@&]?[a-zA-Z0-9 ]+[ !.@&()]?[ a-zA-Z0-9!()]+/,\n                      message: \"Invalid company name\"\n                    }\n                  })}\n                />\n                <br /><b>{errors.companyName && errors.companyName.message}</b>\n\n              </li>\n            </ul>\n            )\n            :\n            null\n          }\n          {percentStatus === \"second\" ? \n            (\n            <ul className=\"form-style-1\">\n              <br />\n              <b>{userInput.companyName}</b>\n              <li>\n                <p className=\"field-divided\">Category</p>\n                <select\n                  id=\"select\"\n                  name=\"category\"\n                  className=\"field-divided\"\n                  defaultValue=\"Company Category\"\n                  onChange={handleChange}\n                >\n                  <option value=\"Construction\">Construction</option>\n                  <option value=\"Cosmetics\">Cosmetics</option>\n                  <option value=\"Entertainment\">Entertainment</option>\n                  <option value=\"Marketing\">Marketing</option>\n                  <option value=\"Food and Drinks\">Food and Drinks</option>\n                  <option value=\"Health Care\">Health Care</option>\n                  <option value=\"Restaurant\">Restaurant</option>\n                  <option value=\"Real Estate\">Real Estate</option>\n                  <option value=\"Technology\">Technology</option>\n                  <option value=\"Other\">Other</option>\n                </select>\n              </li>\n              <li>\n                <textarea\n                  name=\"description\"\n                  className=\"field-long field-textarea\"\n                  placeholder=\"Brief Company Description\"\n                  // value={userInput.description}\n                  onChange={handleChange}\n                  formNoValidate\n                  autoComplete={\"new-password\"}\n                  ref={register({\n                    required: 'Required'\n                  })}\n                />\n                <br/><b>{errors.description && errors.description.message}</b>\n              </li>\n              <li>\n                <input\n                  name=\"services\"\n                  className=\"field-long\"\n                  placeholder=\"Your Company's Services (i.e. haircuts, real estate, software development, construction)\"\n                  onChange={handleChange}\n                  formNoValidate\n                  autoComplete={\"new-password\"}\n                  ref={register({\n                    required: 'Required'\n                  })}\n                />\n                <br/><b>{errors.services && errors.services.message}</b>\n\n              </li>\n              <li>\n                <input\n                  name=\"companyURL\"\n                  className=\"field-long\"\n                  placeholder=\"Company Website (www.companywebsite.com)\"\n                  onChange={handleChange}\n                  formNoValidate\n                  autoComplete={\"new-password\"}\n                  ref={register({\n                    pattern: {\n                      value: /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[\\-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9\\.\\-]+|(?:www\\.|[\\-;:&=\\+\\$,\\w]+@)[A-Za-z0-9\\.\\-]+)((?:\\/[\\+~%\\/\\.\\w\\-_]*)?\\??(?:[\\-\\+=&;%@\\.\\w_]*)#?(?:[\\.\\!\\/\\\\\\w]*))?)/,\n                      message: \"Invalid URL\"\n                    }\n                  })}\n                />\n                <br/><b>{errors.companyURL && errors.companyURL.message}</b>\n              </li>\n            </ul>\n            )\n            :\n            null\n          }\n          {percentStatus === \"third\" ? \n            (\n            <ul className=\"form-style-1\">\n              <br />\n              <b>{userInput.companyName}</b>\n              <li>\n                <input\n                  name=\"companyFacebookURL\"\n                  className=\"field-long\"\n                  placeholder=\"Company Facebook Link\"\n                  onChange={handleChange}\n                  formNoValidate\n                  autoComplete={\"new-password\"}\n                  ref={register({\n                    pattern: {\n                      value: /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[\\-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9\\.\\-]+|(?:www\\.|[\\-;:&=\\+\\$,\\w]+@)[A-Za-z0-9\\.\\-]+)((?:\\/[\\+~%\\/\\.\\w\\-_]*)?\\??(?:[\\-\\+=&;%@\\.\\w_]*)#?(?:[\\.\\!\\/\\\\\\w]*))?)/,\n                      message: \"Invalid Facebook Link\"\n                    }\n                  })}\n                />\n                <br/><b>{errors.companyFacebookURL && errors.companyFacebookURL.message}</b>\n              </li>\n              <li>\n                <input\n                  name=\"companyInstagramUsername\"\n                  className=\"field-long\"\n                  placeholder=\"Company Instagram Username\"\n                  onChange={handleChange}\n                  formNoValidate\n                  autoComplete={\"new-password\"}\n                  ref={register({\n                    pattern: {\n                      value: /[a-z]\\d?/gi,\n                      message: \"Invalid Instagram username\"\n                    }\n                  })}\n                />\n                <br/><b>{errors.companyInstagramUsername && errors.companyInstagramUsername.message}</b>\n              </li>\n              <li>\n                <input\n                  name=\"companyTwitterUsername\"\n                  className=\"field-long\"\n                  placeholder=\"Company Twitter Username\"\n                  onChange={handleChange}\n                  formNoValidate\n                  autoComplete={\"new-password\"}\n                  ref={register({\n                    pattern: {\n                      value: /[a-z]\\d?/gi,\n                      message: \"Invalid Twitter username\"\n                    }\n                  })}\n                />\n                <br/><b>{errors.companyTwitterUsername && errors.companyTwitterUsername.message}</b>\n              </li>\n              <li>\n                <input\n                  name=\"zipCode\"\n                  placeholder=\"Zip Code\"\n                  onChange={handleChange}\n                  formNoValidate\n                  autoComplete={\"new-password\"}\n                  ref={register({\n                    required: 'Required',\n                    pattern: {\n                      value: /^\\d{5}$|^\\d{5}-\\d{4}$/,\n                      message: \"Invalid Zip Code\"\n                    }\n                  })}\n                />\n                {errors.zipCode ?\n                  <b>{errors.zipCode.message}</b>\n                  :\n                  ((zipCodeObj !== undefined) && ('city' in zipCodeObj) && ('state' in zipCodeObj)) ?\n                    <p className=\"center-p\">{zipCodeObj.city}, {zipCodeObj.state} {zipCodeObj.country} </p>\n                    :\n                    (zipCodeObj !== undefined && 'zip' in zipCodeObj && zipCodeObj.zip.length === 5) ?\n                    <b>Invalid Zip Code</b>\n                    :\n                    (zipCodeObj === undefined && userInput.zipCode.length === 5) ?\n                      <b>Invalid US Zip Code</b>\n                      :\n                      null\n                }\n              </li>\n            </ul>\n            )\n            :\n            null\n          }\n          <br />\n          <button onClick={ (e) => onFormSubmit(e)}>{buttonText}</button>\n        </form>\n      </CenteredSection>\n    </SectionWrapper>\n  );\n};\n\nexport default Example","import React from 'react';\nimport './App.css';\n// import Form from './views/Form';\nimport Form from './views/Form/index2';\n\nconst determineScreenState = (width) => {\n  if (width > 1500) {\n    return \"wide\";\n  } else if (width > 1200) {\n    return \"full\";\n  } else if (width > 900) {\n    return \"pacman\";\n  } else if (width > 700) {\n    return \"half\";\n  }\n  return \"mobile\";\n}\n\nclass App extends React.Component {\n  state = {\n    height: 0,\n    width: 0,\n  };\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions = () => { this.setState({ width: window.innerWidth, height: window.innerHeight }) };\n\n  componentWillUnmount() { window.removeEventListener('resize', this.updateWindowDimensions); }\n\n  render() {\n    const { height, width } = this.state;\n    const screenState = determineScreenState(width);\n    const props = { height, width, screenState };\n\n    return (\n      <div className=\"App\">\n        <Form {...props}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}